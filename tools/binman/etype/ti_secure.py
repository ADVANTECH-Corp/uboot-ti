# SPDX-License-Identifier: GPL-2.0+
# Copyright (c) 2022 Texas Instruments Incorporated - https://www.ti.com/
#

# Support for secure binaries for TI K3 platform

from collections import OrderedDict
import os

from binman.entry import Entry, EntryArg

from dtoc import fdt_util
from patman import tools

class Entry_ti_secure(Entry):
    """An entry which contains a secure binary for High-Security (HS) device use.

    Properties / Entry arguments:
	- filename: filename of binary file to be secured

    Output files:
        - filename_HS - output file generated by secure uility (which is
            used as the entry contents)

    """
    def __init__(self, section, etype, node):
        super().__init__(section, etype, node)
        self.filename = fdt_util.GetString(self._node, 'filename')
        self.toolpresent = False
        if not self.filename:
            self.Raise("ti_secure must have a 'filename' property")
        self.toolspath, = self.GetEntryArgsOrProps(
            [EntryArg('ti-secure-dev-pkg-path', str)])
        if not self.toolspath:
            print("WARNING: TI_SECURE_DEV_PKG environment " \
                  "variable must be defined for TI secure devices. " +
                  self.filename + " was NOT secured!")
            return

        self.tool = self.toolspath + "/scripts/secure-binary-image.sh"
        self.toolpresent = os.path.exists(self.tool)
        if not self.toolpresent:
            print(self.tool + " not found. " +
                  self.filename + " was NOT secured!")

    def ObtainContents(self):
        input_fname = self.filename
        output_fname =  input_fname + "_HS"
        args = [
            input_fname, output_fname,
        ]
        if self.toolpresent:
            stdout = tools.Run(self.tool, *args)
        else:
            stdout = tools.Run('cp', *args)
            print(output_fname + ' not secured!')

        self.SetContents(tools.ReadFile(output_fname))
        return True
